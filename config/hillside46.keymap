/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define L_BASE 0
#define L_QWERTY 1
#define L_LOWER 2
#define L_RAISE 3
#define L_ADJUST 4

#define _______ &trans

#define Undo   LC(Z)
#define Cut    LC(X)
#define Copy   LC(C)
#define Paste  LC(V)

/ {
  combos {
    compatible = "zmk,combos";
    timeout-ms = <50>; 
    grave {
      key-positions = <1 2>;
      bindings = <&kp GRAVE>;
    };
    combo_esc {
      key-positions = <2 3>;
      bindings = <&kp ESC>;
    };
    forward_slash {
      key-positions = <8 9>;
      bindings = <&kp FSLH>;
    };
    back_slash {
      key-positions = <9 10>;
      bindings = <&kp BSLH>;
    };
    lpar {
      key-positions = <13 14>;
      bindings = <&kp LPAR>;
    };
  lshift {
      key-positions = <14 15>;
      bindings = <&skq LSHIFT>;
    };
    rshift {
      key-positions = <20 21>;
      bindings = <&skq RSHIFT>;
    }; 
    rpar {
      key-positions = <21 22>;
      bindings = <&kp RPAR>;
    };
    combo_cw {
      key-positions = <13 22>;
      bindings = <&caps_word>;
    };
  };

  behaviors {
    hm: shift {
      compatible = "zmk,behavior-hold-tap";
      label = "SHIFT_HOLD_TAP";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick_tap_ms = <150>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <1000>;
      quick-release;
    }; 
    tdll: tap_dance_layer_lower {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_0";
      #binding-cells = <0>;
      tapping-term-ms = <125>;
      bindings = <&lt L_LOWER TAB>, <&kp TAB>, <&tog L_LOWER>;
    };
    tdlr: tap_dance_layer_raise {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_1";
      #binding-cells = <0>;
      tapping-term-ms = <135>;
      bindings = <&lt L_RAISE ENTER>, <&kp ENTER>, <&tog L_RAISE>;
    };
  };
};

&lt {
  tapping-term-ms = <150>;
  quick-tap-ms = <135>;
};

&caps_word {
  continue-list = <UNDERSCORE BACKSPACE>;
};

/ {
  keymap {
    compatible = "zmk,keymap";
    default_layer {
      label = "DVORAK";
      bindings = <
&none       &kp APOS    &kp COMMA &kp DOT    &kp P    &kp Y                                           &kp F    &kp G    &kp C    &kp R    &kp L &none
&none       &kp A       &kp O     &kp E      &kp U    &kp I                                           &kp D    &kp H    &kp T    &kp N    &kp S &none
&none       &kp SEMI    &kp Q     &kp J      &kp K    &kp X &kp LPAR                       &kp RPAR   &kp B    &kp M    &kp W    &kp V    &kp Z &none
                             &kp HOME  &kp LGUI &lt L_LOWER TAB  &kp SPC &kp RALT        &kp DEL &kp BSPC &lt L_RAISE ENTER &kp LCTRL  &kp END
      >;
      sensor-bindings = <&inc_dec_kp LEFT RIGHT>
    };
    qwerty_layer {
      label = "QWERTY";
      bindings = <
_______  &kp Q    &kp W    &kp E    &kp R    &kp T                                     &kp Y    &kp U    &kp I     &kp O    &kp P    _______
_______  &kp A    &kp S    &kp D    &kp F    &kp G                                     &kp H    &kp J    &kp K     &kp L    &kp SEMI _______
_______  &kp Z    &kp X    &kp C    &kp V    &kp B            _______ _______          &kp N    &kp M    &kp COMMA &kp DOT  &kp FSLH _______
                       _______ _______ _______ _______ _______              _______ _______ _______ _______ _______
      >;
    };
    lower_layer {
      label = "LOWER";
      bindings = <
&kp ESC   &kp EXCL  &kp AT   &kp HASH  &kp DLLR  &kp PRCNT                                    &kp STAR  &kp N7    &kp N8    &kp N9    &kp KP_PLUS   _______
_______   &kp CARET &kp AMPS &kp UNDER &kp LBKT  &kp RBKT                                     &kp SLASH &kp N4    &kp N5    &kp N6    &kp KP_MINUS  _______
_______   &kp COLON  &kp LT   &kp GT    &kp LBRC  &kp RBRC                _______ _______      &kp N0    &kp N1    &kp N2    &kp N3    &kp EQUAL     _______
                                _______ _______ _______ _______ _______                  _______    _______ &mo L_ADJUST _______ _______
      >;
    };

    raise_layer {
      label = "RAISE";
      bindings = <
_______ &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                                   &kp HOME &kp PG_DN &kp PG_UP &kp END     _______ _______  
_______ &kp F6  &kp F7  &kp F8  &kp F9  &kp F10                                  &kp LEFT &kp DOWN  &kp UP    &kp RIGHT   _______ _______
_______ &kp F10 &kp F11 &kp F12 _______ _______           _______ _______        _______  _______   _______   _______     _______ _______
                        _______   _______  &mo L_ADJUST  _______  _______           _______ _______ _______ _______ _______
      >;
    };
    adjust_layer {
      label = "ADJUST";
      bindings = <
_______ &to L_QWERTY &to L_BASE &ext_power EP_TOG &out OUT_TOG    &bt BT_NXT                &kp KP_NUM &kp CAPS          &kp SLCK           &none        &kp C_VOL_UP   &none
_______ &reset      _______    _______           _______         &bt BT_CLR                 &reset     &none             &none              &none        &kp C_MUTE     &none
_______ _______      _______    _______           _______         _______ _______   _______ &none      &kp C_PREV        &kp C_PP           &kp C_NEXT   &kp C_VOL_DN   &none
                                       _______  _______ &kp LGUI _______  &kp SPC   &kp ENTER _______ &kp RALT _______ _______
      >;
    };
  };
};


